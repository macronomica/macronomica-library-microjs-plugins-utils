{"version":3,"sources":["../src/get-config-migrate.js"],"names":["NODE_ENV","process","env","migrationsDir","get","driver","host","port","username","password","database","options","config","user","dbmigrate","getInstance","migrator","originalError","param1","param2","migrations","close","err","console","error","info","exit","setConfigParam"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;;;IACQA,Q,GAAaC,QAAQC,G,CAArBF,Q;;AAER;;kBACe,UAACG,aAAD,EAAmB;AAAA,oBAC2B,iBAAOC,GAAP,CAAW,IAAX,CAD3B;AAAA,MAC1BC,MAD0B,eAC1BA,MAD0B;AAAA,MAClBC,IADkB,eAClBA,IADkB;AAAA,MACZC,IADY,eACZA,IADY;AAAA,MACNC,QADM,eACNA,QADM;AAAA,MACIC,QADJ,eACIA,QADJ;AAAA,MACcC,QADd,eACcA,QADd;;AAGhC,UAAQL,MAAR;AACE,SAAK,UAAL;AAAiBA,eAAS,IAAT;AACf;AACF,SAAK,OAAL;AAAcA,eAAS,OAAT;AACZ;AACF,SAAK,UAAL;AACA,SAAK,SAAL;AAAgBA,eAAS,SAAT;AANlB;;AASA,MAAIM,UAAU;AACZT,SAAQF,QADI;AAEZY,gCACIZ,QADJ,EACgB;AACZK,oBADY;AAEZC,gBAFY;AAGZC,gBAHY;AAIZG,wBAJY;AAKZG,YAAML,QALM;AAMZC;AANY,KADhB;AAFY,GAAd;;AAcA,MAAMK,YAAY,oBAAUC,WAAV,CAAsB,KAAtB,EAA6BJ,OAA7B,EAAsC,UAACK,QAAD,EAAWC,aAAX,EAA0BC,MAA1B,EAAkCC,MAAlC,EAA0CC,UAA1C,EAAyD;AAC7GJ,aAASX,MAAT,CAAgBgB,KAAhB,CAAsB,UAASC,GAAT,EAAc;AAClC,UAAIA,GAAJ,EAAS;AACPC,gBAAQC,KAAR,CAAcP,aAAd;AACAM,gBAAQC,KAAR,CAAcF,GAAd;AACD;AACD;AACAC,cAAQE,IAAR,CAAa,MAAb;AACAxB,cAAQyB,IAAR;AACD,KARD;AASD,GAVe,CAAlB;;AAaAZ,YAAUa,cAAV,CAAyB,gBAAzB,EAA2CxB,aAA3C;;AAEA,SAAOW,SAAP;AACD,C","file":"get-config-migrate.js","sourcesContent":["import config from 'config';\nimport DBMigrate from 'db-migrate';\nconst { NODE_ENV } = process.env;\n\n//specify an own callback, to handle errors on your side of the application.\nexport default (migrationsDir) => {\n  let { driver, host, port, username, password, database } = config.get('db');\n  \n  switch (driver) {\n    case 'postgres': driver = 'pg';\n      break;\n    case 'mysql': driver = 'mysql';\n      break;\n    case 'mongoose':\n    case 'mongodb': driver = 'mongodb';\n  }\n  \n  let options = {\n    env   : NODE_ENV,\n    config: {\n      [ NODE_ENV ]: {\n        driver,\n        host,\n        port,\n        database,\n        user: username,\n        password\n      }\n    }\n  };\n  \n  const dbmigrate = DBMigrate.getInstance(false, options, (migrator, originalError, param1, param2, migrations) => {\n      migrator.driver.close(function(err) {\n        if (err) {\n          console.error(originalError);\n          console.error(err);\n        }\n        //  -m ./dist/migrations\n        console.info('Done');\n        process.exit();\n      });\n    }\n  );\n  \n  dbmigrate.setConfigParam('migrations-dir', migrationsDir);\n  \n  return dbmigrate;\n};"]}